/************************TRICK HEADER*************************
PURPOSE:
    (S_define file for SIM_cannon_analytic)
LIBRARY DEPENDENCIES:
    (
      (ball/src/ball.c)
      (cannon/src/cannon.c)
      (wrappers/src/ballWrapper.c)
      (wrappers/src/cannonWrapper.c)
      (cannon/src/cannon_FDIR.c)
      (FDIR/src/ballFDIR.c)

    )
*************************************************************/

#include "sim_objects/default_trick_sys.sm"
##include "ball/include/ball.h"
##include "cannon/include/cannon.h"
##include "FDIR/include/ballFDIR.h"
##include "FDIR/include/cannonFDIR.h"
##include "wrappers/include/ballWrapper.h"
##include "wrappers/include/cannonWrapper.h"


class CannonSimObject : public Trick::SimObject {

    public:
        CANNON cannon;
        CANNONFAILURE cannonfailure;
        
        InputHeightValue inputH;

        CannonSimObject() { 
            ("default_data") cannon_default_data( &cannon) ;
            ("initialization") cannon_init_wrapper( &cannon, &cannonfailure ) ;
            (0.01, "scheduled") cannon_step_wrapper( &cannon, &cannonfailure, &inputH ) ;
        }
} ;

class BallSimObject : public Trick::SimObject {

    public:
        BALL ball;
        FDIR fdir;
        
        InputHeightValue* pinputH;

        BallSimObject() { 
            ("default_data") FDIR_default_data(&fdir);
            ("default_data") ball_default_data( &ball) ;
            ("initialization") ball_init_wrapper( &ball) ;
            (0.01, "scheduled") ball_step_wrapper( &ball, pinputH) ;
            (0.01, "get_mode") ball_getMode( &fdir) ;
        }
} ;


job_class_order {

    get_mode,
    scheduled
};

CannonSimObject dyn ;
BallSimObject dyn1 ;

void create_connections(){
    dyn1.pinputH = &dyn.inputH ;
}