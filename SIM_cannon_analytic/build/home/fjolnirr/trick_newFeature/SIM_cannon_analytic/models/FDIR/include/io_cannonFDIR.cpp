/**
 * This file was automatically generated by the ICG based on the file:
 * /home/fjolnirr/trick_newFeature/SIM_cannon_analytic/models/FDIR/include/cannonFDIR.h
 * This file contains database parameter declarations specific to the
 * data structures and enumerated types declared in the above file.
 * These database parameters are used by the Trick input and
 * data recording processors to gain access to important simulation
 * variable information.
 */

#define TRICK_IN_IOSRC
#include <stdlib.h>
#include "trick/MemoryManager.hh"
#include "trick/attributes.h"
#include "trick/parameter_types.h"
#include "trick/ClassSizeCheck.hh"
#include "trick/UnitsMap.hh"
#include "trick/checkpoint_stl.hh"
#include "/home/fjolnirr/trick_newFeature/SIM_cannon_analytic/models/FDIR/include/cannonFDIR.h"

extern "C" {

ATTRIBUTES attrCANNONFAILURE[] = {
{"isBroken", "bool", "1", "", "",
  "",
  15,TRICK_BOOLEAN, sizeof(bool), 0, 0, Language_CPP, 0,
  0, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"isOpen", "bool", "1", "", "",
  "",
  15,TRICK_BOOLEAN, sizeof(bool), 0, 0, Language_CPP, 0,
  1, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"isReset", "bool", "1", "", "",
  "",
  15,TRICK_BOOLEAN, sizeof(bool), 0, 0, Language_CPP, 0,
  2, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL},
{"", "", "1", "", "",
  "",
  15,TRICK_VOID, 0, 0, 0, Language_CPP, 0,
  0, NULL, 0, {{0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}},
  NULL, NULL, NULL, NULL} };

} //extern "C"


void init_attrCANNONFAILURE() {

    static int initialized ;
    if (initialized) {
        return;
    }
    initialized = 1;

}

extern "C" {

void init_attrCANNONFAILURE_c_intf() {
    init_attrCANNONFAILURE() ;
}

size_t io_src_sizeof_CANNONFAILURE() {
    return sizeof(CANNONFAILURE) ;
}

void* io_src_allocate_CANNONFAILURE(int num) {
    CANNONFAILURE* temp = (CANNONFAILURE*)calloc(num, sizeof(CANNONFAILURE));
    return (void*)temp;
}

void io_src_destruct_CANNONFAILURE(void* address __attribute__((unused)), int num __attribute__((unused))) {
}

void io_src_delete_CANNONFAILURE(void* address __attribute__((unused))) {}

} //extern "C"

struct UnitsMapCANNONFAILURE {
    UnitsMapCANNONFAILURE() {
        Trick::UnitsMap* units_map_ptr = Trick::UnitsMap::units_map();
        units_map_ptr->add_param("CANNONFAILURE_isBroken", "1") ;
        units_map_ptr->add_param("CANNONFAILURE_isOpen", "1") ;
        units_map_ptr->add_param("CANNONFAILURE_isReset", "1") ;
    }
} umCANNONFAILURE;

