# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _mcb62551ceabae12d33639a84d366a7f8
else:
    import _mcb62551ceabae12d33639a84d366a7f8

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _mcb62551ceabae12d33639a84d366a7f8.delete_SwigPyIterator

    def value(self):
        return _mcb62551ceabae12d33639a84d366a7f8.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _mcb62551ceabae12d33639a84d366a7f8.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _mcb62551ceabae12d33639a84d366a7f8.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _mcb62551ceabae12d33639a84d366a7f8.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _mcb62551ceabae12d33639a84d366a7f8.SwigPyIterator_equal(self, x)

    def copy(self):
        return _mcb62551ceabae12d33639a84d366a7f8.SwigPyIterator_copy(self)

    def next(self):
        return _mcb62551ceabae12d33639a84d366a7f8.SwigPyIterator_next(self)

    def __next__(self):
        return _mcb62551ceabae12d33639a84d366a7f8.SwigPyIterator___next__(self)

    def previous(self):
        return _mcb62551ceabae12d33639a84d366a7f8.SwigPyIterator_previous(self)

    def advance(self, n):
        return _mcb62551ceabae12d33639a84d366a7f8.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _mcb62551ceabae12d33639a84d366a7f8.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _mcb62551ceabae12d33639a84d366a7f8.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _mcb62551ceabae12d33639a84d366a7f8.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _mcb62551ceabae12d33639a84d366a7f8.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _mcb62551ceabae12d33639a84d366a7f8.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _mcb62551ceabae12d33639a84d366a7f8.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _mcb62551ceabae12d33639a84d366a7f8:
_mcb62551ceabae12d33639a84d366a7f8.SwigPyIterator_swigregister(SwigPyIterator)


def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    all_keys = [attr for attr in dir(class_type) if not attr.startswith('__')and attr != '_s' ]
    data_keys = sorted(class_type.__swig_setmethods__.keys())
    method_keys = [ x for x in all_keys if x not in data_keys ]
    raise AttributeError("Type %s does not contain member %s.\n%s data = %s\n%s methods = %s" %
     (self.__class__.__name__,name,self.__class__.__name__,data_keys,self.__class__.__name__,method_keys))

def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
# this line is changed to handle older swigs that used PySwigObject instead of the current SwigPyObject
        if type(value).__name__ == 'SwigPyObject' or type(value).__name__ == 'PySwigObject' :
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        all_keys = [attr for attr in dir(class_type) if not attr.startswith('__') and attr != '_s' ]
        data_keys = sorted(class_type.__swig_setmethods__.keys())
        method_keys = [ x for x in all_keys if x not in data_keys ]
        raise AttributeError("Type %s does not contain member %s.\n%s data = %s\n%s methods = %s" %
         (self.__class__.__name__,name,self.__class__.__name__,data_keys,self.__class__.__name__,method_keys))

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,1)

class FAILURE(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __getitem__(self, *args):
        return _mcb62551ceabae12d33639a84d366a7f8.FAILURE___getitem__(self, *args)

    def __len__(self, *args):
        return _mcb62551ceabae12d33639a84d366a7f8.FAILURE___len__(self, *args)
    isBroken = property(_mcb62551ceabae12d33639a84d366a7f8.FAILURE_isBroken_get, _mcb62551ceabae12d33639a84d366a7f8.FAILURE_isBroken_set)
    isBug = property(_mcb62551ceabae12d33639a84d366a7f8.FAILURE_isBug_get, _mcb62551ceabae12d33639a84d366a7f8.FAILURE_isBug_set)
    isCrashed = property(_mcb62551ceabae12d33639a84d366a7f8.FAILURE_isCrashed_get, _mcb62551ceabae12d33639a84d366a7f8.FAILURE_isCrashed_set)
    isFailure = property(_mcb62551ceabae12d33639a84d366a7f8.FAILURE_isFailure_get, _mcb62551ceabae12d33639a84d366a7f8.FAILURE_isFailure_set)

    def __init__(self, **kwargs):
        import _sim_services
        this = _mcb62551ceabae12d33639a84d366a7f8.new_FAILURE()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "FAILURE", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW


    __swig_destroy__ = _mcb62551ceabae12d33639a84d366a7f8.delete_FAILURE

# Register FAILURE in _mcb62551ceabae12d33639a84d366a7f8:
_mcb62551ceabae12d33639a84d366a7f8.FAILURE_swigregister(FAILURE)

class RUN(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __getitem__(self, *args):
        return _mcb62551ceabae12d33639a84d366a7f8.RUN___getitem__(self, *args)

    def __len__(self, *args):
        return _mcb62551ceabae12d33639a84d366a7f8.RUN___len__(self, *args)
    isOn = property(_mcb62551ceabae12d33639a84d366a7f8.RUN_isOn_get, _mcb62551ceabae12d33639a84d366a7f8.RUN_isOn_set)
    isRun = property(_mcb62551ceabae12d33639a84d366a7f8.RUN_isRun_get, _mcb62551ceabae12d33639a84d366a7f8.RUN_isRun_set)

    def __init__(self, **kwargs):
        import _sim_services
        this = _mcb62551ceabae12d33639a84d366a7f8.new_RUN()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "RUN", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW


    __swig_destroy__ = _mcb62551ceabae12d33639a84d366a7f8.delete_RUN

# Register RUN in _mcb62551ceabae12d33639a84d366a7f8:
_mcb62551ceabae12d33639a84d366a7f8.RUN_swigregister(RUN)

class CLOSE(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __getitem__(self, *args):
        return _mcb62551ceabae12d33639a84d366a7f8.CLOSE___getitem__(self, *args)

    def __len__(self, *args):
        return _mcb62551ceabae12d33639a84d366a7f8.CLOSE___len__(self, *args)
    isOff = property(_mcb62551ceabae12d33639a84d366a7f8.CLOSE_isOff_get, _mcb62551ceabae12d33639a84d366a7f8.CLOSE_isOff_set)
    isClose = property(_mcb62551ceabae12d33639a84d366a7f8.CLOSE_isClose_get, _mcb62551ceabae12d33639a84d366a7f8.CLOSE_isClose_set)

    def __init__(self, **kwargs):
        import _sim_services
        this = _mcb62551ceabae12d33639a84d366a7f8.new_CLOSE()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "CLOSE", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW


    __swig_destroy__ = _mcb62551ceabae12d33639a84d366a7f8.delete_CLOSE

# Register CLOSE in _mcb62551ceabae12d33639a84d366a7f8:
_mcb62551ceabae12d33639a84d366a7f8.CLOSE_swigregister(CLOSE)

class WARNING(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __getitem__(self, *args):
        return _mcb62551ceabae12d33639a84d366a7f8.WARNING___getitem__(self, *args)

    def __len__(self, *args):
        return _mcb62551ceabae12d33639a84d366a7f8.WARNING___len__(self, *args)
    isPatching = property(_mcb62551ceabae12d33639a84d366a7f8.WARNING_isPatching_get, _mcb62551ceabae12d33639a84d366a7f8.WARNING_isPatching_set)
    isMaintanence = property(_mcb62551ceabae12d33639a84d366a7f8.WARNING_isMaintanence_get, _mcb62551ceabae12d33639a84d366a7f8.WARNING_isMaintanence_set)
    isRecovery = property(_mcb62551ceabae12d33639a84d366a7f8.WARNING_isRecovery_get, _mcb62551ceabae12d33639a84d366a7f8.WARNING_isRecovery_set)
    isWarning = property(_mcb62551ceabae12d33639a84d366a7f8.WARNING_isWarning_get, _mcb62551ceabae12d33639a84d366a7f8.WARNING_isWarning_set)

    def __init__(self, **kwargs):
        import _sim_services
        this = _mcb62551ceabae12d33639a84d366a7f8.new_WARNING()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "WARNING", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW


    __swig_destroy__ = _mcb62551ceabae12d33639a84d366a7f8.delete_WARNING

# Register WARNING in _mcb62551ceabae12d33639a84d366a7f8:
_mcb62551ceabae12d33639a84d366a7f8.WARNING_swigregister(WARNING)

class FDIR(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __getitem__(self, *args):
        return _mcb62551ceabae12d33639a84d366a7f8.FDIR___getitem__(self, *args)

    def __len__(self, *args):
        return _mcb62551ceabae12d33639a84d366a7f8.FDIR___len__(self, *args)
    warning = property(_mcb62551ceabae12d33639a84d366a7f8.FDIR_warning_get, _mcb62551ceabae12d33639a84d366a7f8.FDIR_warning_set)
    run = property(_mcb62551ceabae12d33639a84d366a7f8.FDIR_run_get, _mcb62551ceabae12d33639a84d366a7f8.FDIR_run_set)
    close = property(_mcb62551ceabae12d33639a84d366a7f8.FDIR_close_get, _mcb62551ceabae12d33639a84d366a7f8.FDIR_close_set)
    failure = property(_mcb62551ceabae12d33639a84d366a7f8.FDIR_failure_get, _mcb62551ceabae12d33639a84d366a7f8.FDIR_failure_set)
    isFDIR = property(_mcb62551ceabae12d33639a84d366a7f8.FDIR_isFDIR_get, _mcb62551ceabae12d33639a84d366a7f8.FDIR_isFDIR_set)

    def __init__(self, **kwargs):
        import _sim_services
        this = _mcb62551ceabae12d33639a84d366a7f8.new_FDIR()
        try: self.this.append(this)
        except: self.this = this
        if 'TMMName' in kwargs:
            self.this.own(0)
            isThisInMM = _sim_services.get_alloc_info_at(this)
            if isThisInMM:
                _sim_services.set_alloc_name_at(this, kwargs['TMMName'])
            else:
                _sim_services.TMM_declare_ext_var(this, _sim_services.TRICK_STRUCTURED, "FDIR", 0, kwargs['TMMName'], 0, None)
            alloc_info = _sim_services.get_alloc_info_at(this)
            alloc_info.stcl = _sim_services.TRICK_LOCAL
            alloc_info.alloc_type = _sim_services.TRICK_ALLOC_NEW


    __swig_destroy__ = _mcb62551ceabae12d33639a84d366a7f8.delete_FDIR

# Register FDIR in _mcb62551ceabae12d33639a84d366a7f8:
_mcb62551ceabae12d33639a84d366a7f8.FDIR_swigregister(FDIR)


def FDIR_default_data(*args):
    return _mcb62551ceabae12d33639a84d366a7f8.FDIR_default_data(*args)

def ball_run(*args):
    return _mcb62551ceabae12d33639a84d366a7f8.ball_run(*args)

def ball_close(*args):
    return _mcb62551ceabae12d33639a84d366a7f8.ball_close(*args)

def ball_failure(*args):
    return _mcb62551ceabae12d33639a84d366a7f8.ball_failure(*args)

def ball_warning(*args):
    return _mcb62551ceabae12d33639a84d366a7f8.ball_warning(*args)

def ball_getMode(*args):
    return _mcb62551ceabae12d33639a84d366a7f8.ball_getMode(*args)


